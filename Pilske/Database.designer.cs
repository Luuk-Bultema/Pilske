#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pilske
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="drankensysteem")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserthapje(hapje instance);
    partial void Updatehapje(hapje instance);
    partial void Deletehapje(hapje instance);
    partial void Insertbieren(bieren instance);
    partial void Updatebieren(bieren instance);
    partial void Deletebieren(bieren instance);
    partial void Insertbestelling(bestelling instance);
    partial void Updatebestelling(bestelling instance);
    partial void Deletebestelling(bestelling instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::Pilske.Properties.Settings.Default.drankensysteemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<hapje> hapjes
		{
			get
			{
				return this.GetTable<hapje>();
			}
		}
		
		public System.Data.Linq.Table<bieren> bierens
		{
			get
			{
				return this.GetTable<bieren>();
			}
		}
		
		public System.Data.Linq.Table<bestelling> bestellings
		{
			get
			{
				return this.GetTable<bestelling>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.hapjes")]
	public partial class hapje : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _hid;
		
		private string _hapje1;
		
		private EntitySet<bestelling> _bestellings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhidChanging(int value);
    partial void OnhidChanged();
    partial void Onhapje1Changing(string value);
    partial void Onhapje1Changed();
    #endregion
		
		public hapje()
		{
			this._bestellings = new EntitySet<bestelling>(new Action<bestelling>(this.attach_bestellings), new Action<bestelling>(this.detach_bestellings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int hid
		{
			get
			{
				return this._hid;
			}
			set
			{
				if ((this._hid != value))
				{
					this.OnhidChanging(value);
					this.SendPropertyChanging();
					this._hid = value;
					this.SendPropertyChanged("hid");
					this.OnhidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="hapje", Storage="_hapje1", DbType="VarChar(50)")]
		public string hapje1
		{
			get
			{
				return this._hapje1;
			}
			set
			{
				if ((this._hapje1 != value))
				{
					this.Onhapje1Changing(value);
					this.SendPropertyChanging();
					this._hapje1 = value;
					this.SendPropertyChanged("hapje1");
					this.Onhapje1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="hapje_bestelling", Storage="_bestellings", ThisKey="hid", OtherKey="hid")]
		public EntitySet<bestelling> bestellings
		{
			get
			{
				return this._bestellings;
			}
			set
			{
				this._bestellings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bestellings(bestelling entity)
		{
			this.SendPropertyChanging();
			entity.hapje = this;
		}
		
		private void detach_bestellings(bestelling entity)
		{
			this.SendPropertyChanging();
			entity.hapje = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bieren")]
	public partial class bieren : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bid;
		
		private string _bier;
		
		private EntitySet<bestelling> _bestellings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbidChanging(int value);
    partial void OnbidChanged();
    partial void OnbierChanging(string value);
    partial void OnbierChanged();
    #endregion
		
		public bieren()
		{
			this._bestellings = new EntitySet<bestelling>(new Action<bestelling>(this.attach_bestellings), new Action<bestelling>(this.detach_bestellings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bid
		{
			get
			{
				return this._bid;
			}
			set
			{
				if ((this._bid != value))
				{
					this.OnbidChanging(value);
					this.SendPropertyChanging();
					this._bid = value;
					this.SendPropertyChanged("bid");
					this.OnbidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bier", DbType="VarChar(50)")]
		public string bier
		{
			get
			{
				return this._bier;
			}
			set
			{
				if ((this._bier != value))
				{
					this.OnbierChanging(value);
					this.SendPropertyChanging();
					this._bier = value;
					this.SendPropertyChanged("bier");
					this.OnbierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bieren_bestelling", Storage="_bestellings", ThisKey="bid", OtherKey="bid")]
		public EntitySet<bestelling> bestellings
		{
			get
			{
				return this._bestellings;
			}
			set
			{
				this._bestellings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bestellings(bestelling entity)
		{
			this.SendPropertyChanging();
			entity.bieren = this;
		}
		
		private void detach_bestellings(bestelling entity)
		{
			this.SendPropertyChanging();
			entity.bieren = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bestelling")]
	public partial class bestelling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bestelid;
		
		private int _bid;
		
		private int _hid;
		
		private System.Nullable<System.DateTime> _bestellingsDatum;
		
		private EntityRef<bieren> _bieren;
		
		private EntityRef<hapje> _hapje;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbestelidChanging(int value);
    partial void OnbestelidChanged();
    partial void OnbidChanging(int value);
    partial void OnbidChanged();
    partial void OnhidChanging(int value);
    partial void OnhidChanged();
    partial void OnbestellingsDatumChanging(System.Nullable<System.DateTime> value);
    partial void OnbestellingsDatumChanged();
    #endregion
		
		public bestelling()
		{
			this._bieren = default(EntityRef<bieren>);
			this._hapje = default(EntityRef<hapje>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bestelid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bestelid
		{
			get
			{
				return this._bestelid;
			}
			set
			{
				if ((this._bestelid != value))
				{
					this.OnbestelidChanging(value);
					this.SendPropertyChanging();
					this._bestelid = value;
					this.SendPropertyChanged("bestelid");
					this.OnbestelidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bid", DbType="Int NOT NULL")]
		public int bid
		{
			get
			{
				return this._bid;
			}
			set
			{
				if ((this._bid != value))
				{
					if (this._bieren.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbidChanging(value);
					this.SendPropertyChanging();
					this._bid = value;
					this.SendPropertyChanged("bid");
					this.OnbidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hid", DbType="Int NOT NULL")]
		public int hid
		{
			get
			{
				return this._hid;
			}
			set
			{
				if ((this._hid != value))
				{
					if (this._hapje.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnhidChanging(value);
					this.SendPropertyChanging();
					this._hid = value;
					this.SendPropertyChanged("hid");
					this.OnhidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bestellingsDatum", DbType="Date")]
		public System.Nullable<System.DateTime> bestellingsDatum
		{
			get
			{
				return this._bestellingsDatum;
			}
			set
			{
				if ((this._bestellingsDatum != value))
				{
					this.OnbestellingsDatumChanging(value);
					this.SendPropertyChanging();
					this._bestellingsDatum = value;
					this.SendPropertyChanged("bestellingsDatum");
					this.OnbestellingsDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bieren_bestelling", Storage="_bieren", ThisKey="bid", OtherKey="bid", IsForeignKey=true)]
		public bieren bieren
		{
			get
			{
				return this._bieren.Entity;
			}
			set
			{
				bieren previousValue = this._bieren.Entity;
				if (((previousValue != value) 
							|| (this._bieren.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bieren.Entity = null;
						previousValue.bestellings.Remove(this);
					}
					this._bieren.Entity = value;
					if ((value != null))
					{
						value.bestellings.Add(this);
						this._bid = value.bid;
					}
					else
					{
						this._bid = default(int);
					}
					this.SendPropertyChanged("bieren");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="hapje_bestelling", Storage="_hapje", ThisKey="hid", OtherKey="hid", IsForeignKey=true)]
		public hapje hapje
		{
			get
			{
				return this._hapje.Entity;
			}
			set
			{
				hapje previousValue = this._hapje.Entity;
				if (((previousValue != value) 
							|| (this._hapje.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._hapje.Entity = null;
						previousValue.bestellings.Remove(this);
					}
					this._hapje.Entity = value;
					if ((value != null))
					{
						value.bestellings.Add(this);
						this._hid = value.hid;
					}
					else
					{
						this._hid = default(int);
					}
					this.SendPropertyChanged("hapje");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
